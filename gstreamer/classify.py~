# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A demo which runs object classification on camera frames."""
import argparse
import time
import re
import svgwrite
import imp
import os
import cv2
from edgetpu.classification.engine import ClassificationEngine
import gstreamer
import numpy
import signal

def load_labels(path):
    p = re.compile(r'\s*(\d+)(.+)')
    with open(path, 'r', encoding='utf-8') as f:
       lines = (p.match(line).groups() for line in f.readlines())
       return {int(num): text.strip() for num, text in lines}

def generate_svg(dwg, text_lines):
    for y, line in enumerate(text_lines):
      dwg.add(dwg.text(line, insert=(11, y*20+1), fill='black', font_size='20'))
      dwg.add(dwg.text(line, insert=(10, y*20), fill='white', font_size='20'))

def sigint_handler(signum, frame):
    stopVideo()

video_name = 'video.avi'
video = cv2.VideoWriter(video_name, cv2.VideoWriter_fourcc('M','J','P','G'), 10, (640, 480))
#video = None
signal.signal(signal.SIGINT, sigint_handler)

def stopVideo():
    video.release()
    print('Closed')
    cv2.destroyAllWindows()

def main():
    default_model_dir = "../all_models"
    default_model = 'mobilenet_v2_1.0_224_quant_edgetpu.tflite'
    default_labels = 'imagenet_labels.txt'
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='.tflite model path',
                        default=os.path.join(default_model_dir,default_model))
    parser.add_argument('--labels', help='label file path',
                        default=os.path.join(default_model_dir, default_labels))
    parser.add_argument('--top_k', type=int, default=3,
                        help='number of classes with highest score to display')
    parser.add_argument('--threshold', type=float, default=0.1,
                        help='class score threshold')
    args = parser.parse_args()

    print("Loading %s with %s labels."%(args.model, args.labels))
#    engine = ClassificationEngine(args.model)
#    labels = load_labels(args.labels)
#    video_name = 'video'
#    video = cv2.VideoWriter(video_name, 0, 1, (320, 240))

    last_time = time.monotonic()
    def user_callback(image, svg_canvas):
      nonlocal last_time
      start_time = time.monotonic()
      
#      print(image.size)
      open_cv_image = numpy.array(image.convert('RGB'))
      cv2.imshow('frame', open_cv_image)
      # Convert RGB to BGR
      video.write(open_cv_image[:, :, ::-1].copy())
      #video.release()
#      results = engine.ClassifyWithImage(image, threshold=args.threshold, top_k=args.top_k)
      end_time = time.monotonic()
      text_lines = [
          'Inference: %.2f ms' %((end_time - start_time) * 1000),
          'FPS: %.2f fps' %(1.0/(end_time - last_time)),
      ]
#      for index, score in results:
#        text_lines.append('score=%.2f: %s' % (score, labels[index]))
#      print(' '.join(text_lines))
      last_time = end_time
      generate_svg(svg_canvas, text_lines)

    result = gstreamer.run_pipeline(user_callback, appsink_size=(640,480))
#    stopVideo()

if __name__ == '__main__':
    main()
